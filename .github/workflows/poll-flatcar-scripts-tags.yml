name: Poll flatcar/scripts last 10 release tags

on:
  schedule:
    - cron: "0 */12 * * *" # Runs every 12 hours
  push:
    branches: [main, feat/*]
  workflow_dispatch:

jobs:
  poll-flatcar-scripts-tags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch last 10 release versions from flatcar/scripts
        id: get_releases
        run: |
          curl -s "https://api.github.com/repos/flatcar/scripts/releases?per_page=10" | jq -r '.[].tag_name' > latest_releases.txt
          echo "LATEST_RELEASES=$(cat latest_releases.txt | paste -sd "," -)" >> $GITHUB_ENV

      - name: Fetch all release tags from this repo
        id: get_own_releases
        run: |
          page=1
          > own_releases.txt
          while :; do
            releases=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100&page=$page")
            count=$(echo "$releases" | jq 'length')
            if [ "$count" -eq 0 ]; then
              break
            fi
            echo "$releases" | jq -r '.[].tag_name' | sed -E 's/^.*-(stable|lts)(-.*)/\1\2/' >> own_releases.txt
            page=$((page + 1))
          done
          echo "OWN_RELEASES=$(cat own_releases.txt | paste -sd "," -)" >> $GITHUB_ENV

      - name: Find new releases to build
        id: find_new
        run: |
          comm -23 <(sort latest_releases.txt) <(sort own_releases.txt) > new_releases.txt || true
          new_releases=$(cat new_releases.txt | paste -sd "," -)
          echo "NEW_RELEASES=$new_releases" >> $GITHUB_ENV
          echo "new_releases=$new_releases" >> $GITHUB_OUTPUT
          echo "NEW_RELEASES=$new_releases"

      - name: Trigger downstream workflow for each new release
        if: steps.find_new.outputs.new_releases != ''
        run: |
          grep '^stable-' new_releases.txt | while IFS= read -r release; do
            echo "Triggering workflow for release: $release"
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }} gh workflow run build-and-deploy-nvme-tcp.yml --ref ${{ github.ref }} -f version="$release"
          done
